from kfp import dsl
from kfp.dsl import Output, Dataset

@dsl.component(
    base_image='sosanzma/spade-pingpong:latest',
    packages_to_install=['spade==4.0.3', 'pyjabber>=0.1.9,<=0.2.4', 'slixmpp>=1.8.5,<=1.9.1']
)
def spade_ping_pong_embedded_task(
    max_pings: int = 10,
    ping_interval: int = 2,
    results_output: Output[Dataset] = None
) -> None:
    """
    Ejecuta un sistema multi-agente SPADE completo con c√≥digo embebido
    
    Args:
        max_pings: N√∫mero m√°ximo de mensajes ping a enviar
        ping_interval: Intervalo en segundos entre mensajes ping (actualmente no usado)
        results_output: Archivo de resultados JSON como artifact
    """
    import asyncio
    import subprocess
    import socket
    import signal
    import sys
    import json
    import time
    import os
    from pathlib import Path
    from datetime import datetime
    
    print("üéØ SPADE Ping-Pong System (Versi√≥n Embebida) iniciado")
    
    # =================================================================
    # CLASE PROCESS MANAGER (del orchestrator.py)
    # =================================================================
    class ProcessManager:
        """Maneja procesos de manera segura con cleanup autom√°tico"""
        
        def __init__(self):
            self.processes = []
            self.setup_signal_handlers()
        
        def setup_signal_handlers(self):
            """Configura manejo de se√±ales para cleanup"""
            def signal_handler(signum, frame):
                print(f"üì° Se√±al recibida: {signum}")
                self.cleanup()
                sys.exit(0)
            
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
        
        def add_process(self, process):
            """A√±ade proceso a la lista para cleanup"""
            self.processes.append(process)
        
        def cleanup(self):
            """Termina todos los procesos de manera limpia"""
            print("üßπ Iniciando cleanup de procesos...")
            for process in self.processes:
                if process.poll() is None:  # Proceso a√∫n corriendo
                    print(f"üîÑ Terminando proceso PID: {process.pid}")
                    process.terminate()
                    try:
                        process.wait(timeout=5)
                        print(f"‚úÖ Proceso terminado correctamente")
                    except subprocess.TimeoutExpired:
                        print(f"‚ö†Ô∏è Proceso no respondi√≥, forzando kill...")
                        process.kill()
                        process.wait()
    
    # =================================================================
    # FUNCIONES DE UTILIDAD (del orchestrator.py)
    # =================================================================
    def find_available_port(start_port=5222):
        """Encuentra un puerto disponible empezando desde start_port"""
        for port in range(start_port, start_port + 100):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('localhost', port))
                    return port
            except OSError:
                continue
        raise Exception("No hay puertos disponibles")
    
    async def wait_for_xmpp_server(port=5222, max_attempts=15):
        """Espera hasta que el servidor XMPP est√© disponible"""
        print(f"üîç Verificando servidor XMPP en puerto {port}...")
        
        for attempt in range(max_attempts):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(2)
                    result = s.connect_ex(('localhost', port))
                    if result == 0:
                        print(f"‚úÖ Servidor XMPP disponible en puerto {port}")
                        return True
            except Exception as e:
                pass
            
            print(f"‚è≥ Intento {attempt + 1}/{max_attempts}, esperando...")
            await asyncio.sleep(2)
        
        return False
    
    async def start_xmpp_server(port, process_manager):
        """Inicia el servidor XMPP usando spade run"""
        print(f"üì° Iniciando servidor XMPP en puerto {port}...")
        
        try:
            # Usar spade run sin par√°metros adicionales
            cmd = ["spade", "run"]
            
            print(f"üîß Comando: {' '.join(cmd)}")
            
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            print(f"üöÄ Servidor XMPP iniciado (PID: {process.pid})")
            process_manager.add_process(process)
            
            # Dar m√°s tiempo para que el servidor arranque
            await asyncio.sleep(8)
            
            return process
        
        except Exception as e:
            print(f"‚ùå Error iniciando servidor XMPP: {e}")
            raise
    
    # =================================================================
    # AGENTES SPADE (del spade_ping_pong.py)
    # =================================================================
    from spade.agent import Agent
    from spade.behaviour import CyclicBehaviour
    from spade.message import Message
    from spade.template import Template
    
    class PingAgent(Agent):
        """Agente que env√≠a mensajes PING"""
        
        def __init__(self, jid, password, max_pings=10):
            super().__init__(jid, password)
            self.ping_count = 0
            self.max_pings = max_pings
            self.start_time = None
        
        class PingBehaviour(CyclicBehaviour):
            async def run(self):
                if self.agent.start_time is None:
                    self.agent.start_time = datetime.now()
                    print(f"üèì PingAgent iniciado: {self.agent.start_time}")
                
                if self.agent.ping_count < self.agent.max_pings:
                    # Enviar PING
                    msg = Message(to="pong@localhost")
                    msg.set_metadata("performative", "inform")
                    msg.body = f"ping_{self.agent.ping_count}"
                    
                    await self.send(msg)
                    print(f"üì§ Ping enviado #{self.agent.ping_count}: {msg.body}")
                    self.agent.ping_count += 1
                    
                    await asyncio.sleep(2)  # Esperar 2 segundos entre pings
                else:
                    print(f"‚úÖ PingAgent completado. Total pings: {self.agent.ping_count}")
                    await self.agent.stop()
        
        async def setup(self):
            print("üèì PingAgent configurado")
            ping_behaviour = self.PingBehaviour()
            self.add_behaviour(ping_behaviour)
    
    class PongAgent(Agent):
        """Agente que responde mensajes PONG"""
        
        def __init__(self, jid, password):
            super().__init__(jid, password)
            self.pong_count = 0
            self.responses = []
        
        class PongBehaviour(CyclicBehaviour):
            async def run(self):
                # Esperar mensajes
                msg = await self.receive(timeout=30)
                
                if msg:
                    print(f"üì• Pong recibido: {msg.body}")
                    
                    # Responder con PONG
                    reply = msg.make_reply()
                    reply.body = f"pong_{self.agent.pong_count}"
                    await self.send(reply)
                    
                    # Guardar estad√≠sticas
                    self.agent.responses.append({
                        "received": msg.body,
                        "sent": reply.body,
                        "timestamp": datetime.now().isoformat()
                    })
                    
                    print(f"üì§ Pong enviado #{self.agent.pong_count}: {reply.body}")
                    self.agent.pong_count += 1
                else:
                    # Timeout - probablemente PingAgent termin√≥
                    print("‚è∞ PongAgent timeout - terminando")
                    await self.agent.stop()
        
        async def setup(self):
            print("üèì PongAgent configurado")
            template = Template()
            template.set_metadata("performative", "inform")
            pong_behaviour = self.PongBehaviour()
            self.add_behaviour(pong_behaviour, template)
    
    # =================================================================
    # FUNCI√ìN PRINCIPAL DEL SISTEMA PING-PONG
    # =================================================================
    async def run_ping_pong_system(max_pings):
        """Funci√≥n principal que ejecuta el sistema ping-pong"""
        
        print("üöÄ Iniciando sistema Ping-Pong...")
        
        # Crear agentes
        ping_agent = PingAgent("ping@localhost", "ping_password", max_pings)
        pong_agent = PongAgent("pong@localhost", "pong_password")
        
        # Iniciar agentes
        await ping_agent.start()
        await pong_agent.start()
        
        print("‚úÖ Agentes iniciados, comenzando intercambio...")
        
        # Esperar hasta que terminen
        while ping_agent.is_alive() or pong_agent.is_alive():
            await asyncio.sleep(1)
        
        # Recopilar resultados
        results = {
            "execution_summary": {
                "start_time": ping_agent.start_time.isoformat() if ping_agent.start_time else None,
                "end_time": datetime.now().isoformat(),
                "total_pings": ping_agent.ping_count,
                "total_pongs": pong_agent.pong_count,
                "success": ping_agent.ping_count == pong_agent.pong_count
            },
            "message_history": pong_agent.responses,
            "agent_statistics": {
                "ping_agent": {
                    "messages_sent": ping_agent.ping_count,
                    "status": "completed"
                },
                "pong_agent": {
                    "messages_received": pong_agent.pong_count,
                    "responses_sent": len(pong_agent.responses),
                    "status": "completed"
                }
            }
        }
        
        print(f"üìä Sistema completado:")
        print(f"   - Pings enviados: {results['execution_summary']['total_pings']}")
        print(f"   - Pongs recibidos: {results['execution_summary']['total_pongs']}")
        print(f"   - √âxito: {results['execution_summary']['success']}")
        
        return results
    
    # =================================================================
    # FUNCI√ìN PRINCIPAL EMBEBIDA (del orchestrator.py main())
    # =================================================================
    async def main_orchestrator():
        """Funci√≥n principal del orquestador embebido"""
        print("üéØ SPADE Pipeline Orchestrator embebido iniciado")
        print(f"‚è∞ Tiempo inicio: {datetime.now().isoformat()}")
        
        # Inicializar gestor de procesos
        process_manager = ProcessManager()
        
        try:
            # 1. Encontrar puerto disponible
            port = find_available_port(5222)
            print(f"üîå Puerto disponible encontrado: {port}")
            
            # 2. Iniciar servidor XMPP
            xmpp_process = await start_xmpp_server(port, process_manager)
            
            # 3. Dar tiempo al servidor para arrancar completamente
            print("‚è≥ Esperando a que el servidor XMPP est√© completamente listo...")
            await asyncio.sleep(10)
            print("‚úÖ Servidor XMPP deber√≠a estar listo")
            
            # 4. Ejecutar sistema ping-pong
            print("üèì Ejecutando sistema Ping-Pong...")
            start_agents_time = datetime.now()
            
            results = await run_ping_pong_system(max_pings)
            
            end_agents_time = datetime.now()
            execution_duration = (end_agents_time - start_agents_time).total_seconds()
            
            # 5. A√±adir metadatos de orquestaci√≥n
            results["orchestration"] = {
                "xmpp_port": port,
                "start_time": start_agents_time.isoformat(),
                "end_time": end_agents_time.isoformat(),
                "duration_seconds": execution_duration,
                "server_pid": xmpp_process.pid if xmpp_process else None
            }
            
            # 6. Mostrar estad√≠sticas finales
            print("\\nüìä ESTAD√çSTICAS FINALES:")
            print(f"   üèì Mensajes Ping: {results['execution_summary']['total_pings']}")
            print(f"   üèì Mensajes Pong: {results['execution_summary']['total_pongs']}")
            print(f"   ‚è±Ô∏è Duraci√≥n: {execution_duration:.2f} segundos")
            print(f"   ‚úÖ √âxito: {results['execution_summary']['success']}")
            print(f"   üîå Puerto XMPP: {port}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå Error en orquestaci√≥n: {e}")
            
            # Crear resultados de error
            error_results = {
                "execution_summary": {
                    "success": False,
                    "error": str(e),
                    "total_pings": 0,
                    "total_pongs": 0,
                    "start_time": datetime.now().isoformat(),
                    "end_time": datetime.now().isoformat()
                },
                "orchestration": {
                    "error": True,
                    "error_details": str(e),
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            return error_results
        
        finally:
            # 7. Cleanup autom√°tico
            print("üßπ Ejecutando cleanup final...")
            process_manager.cleanup()
            print("‚úÖ Orquestador finalizado")
    
    # =================================================================
    # EJECUCI√ìN PRINCIPAL DEL COMPONENTE
    # =================================================================
    try:
        print("üéØ Iniciando sistema SPADE Ping-Pong embebido...")
        
        # Ejecutar el orquestador completo
        results = asyncio.run(main_orchestrator())
        
        # Crear archivo de texto para el artifact
        success = results.get("execution_summary", {}).get("success", False)
        total_pings = results.get("execution_summary", {}).get("total_pings", 0)
        total_pongs = results.get("execution_summary", {}).get("total_pongs", 0)
        duration = results.get("orchestration", {}).get("duration_seconds", 0)
        error = results.get("execution_summary", {}).get("error", None)
        
        status_text = f"""SPADE Ping-Pong System Results (Embebido)
==============================================
Overall Test Success: {success}

Ping-Pong Communication:
- Messages Sent (Ping): {total_pings}
- Messages Received (Pong): {total_pongs}
- Communication Success: {total_pings == total_pongs}
- Expected Messages: {max_pings}

System Performance:
- Total Duration: {duration:.2f} seconds
- XMPP Server Port: {results.get('orchestration', {}).get('xmpp_port', 'Unknown')}
- System Error: {error or 'None'}

Agent Statistics:
- Ping Agent Status: {results.get('agent_statistics', {}).get('ping_agent', {}).get('status', 'Unknown')}
- Pong Agent Status: {results.get('agent_statistics', {}).get('pong_agent', {}).get('status', 'Unknown')}
- Message History Count: {len(results.get('message_history', []))}

Timestamp: {results.get('execution_summary', {}).get('end_time', 'Unknown')}

üéØ RESULTADO FINAL: {'‚úÖ SUCCESS' if success else '‚ùå FAILED'}

==== DETAILED RESULTS (JSON) ====
{json.dumps(results, indent=2)}
"""
        
        # Guardar el resultado en el artifact de Kubeflow
        with open(results_output.path, 'w') as f:
            f.write(status_text)
        
        print(f"üìã Resultado del sistema: {'‚úÖ EXITOSO' if success else '‚ùå FALL√ì'}")
        print(f"üíæ Resultados guardados en artifact: {results_output.path}")
        
        # Tambi√©n crear un JSON con datos detallados en /output (para compatibilidad)
        output_dir = Path("/output")
        output_dir.mkdir(exist_ok=True)
        
        json_file = output_dir / "spade_ping_pong_results.json"
        with open(json_file, "w") as f:
            json.dump(results, f, indent=2)
        
        print(f"üìä Datos detallados en: {json_file}")
        
    except Exception as e:
        print(f"üí• Error fatal en componente embebido: {e}")
        import traceback
        traceback.print_exc()
        
        # Crear archivo de error para el artifact
        error_text = f"""SPADE Ping-Pong System Results (Embebido)
==============================================
Overall Test Success: False

FATAL ERROR: {str(e)}

Timestamp: {datetime.now().isoformat()}

üéØ RESULTADO FINAL: ‚ùå FAILED

Traceback:
{traceback.format_exc()}
"""
        
        with open(results_output.path, 'w') as f:
            f.write(error_text)
        
        # Re-raise para que Kubeflow marque el componente como fallado
        raise
    
    return None

@dsl.pipeline(
    name='spade-ping-pong-embedded-pipeline',
    description='Sistema multi-agente SPADE Ping-Pong con c√≥digo completamente embebido'
)
def spade_ping_pong_embedded_pipeline(
    max_pings: int = 10,
    ping_interval: int = 2
):
    """
    Pipeline embebido que ejecuta un sistema completo de agentes SPADE
    
    VERSI√ìN EMBEBIDA: Todo el c√≥digo del orchestrator y agentes est√° 
    integrado directamente en el componente Kubeflow para compatibilidad 
    total con Vertex AI.
    
    El pipeline incluye:
    1. Servidor XMPP integrado (spade run)
    2. PingAgent - Env√≠a mensajes ping peri√≥dicamente  
    3. PongAgent - Responde con mensajes pong
    4. Recopilaci√≥n de estad√≠sticas y resultados completos
    5. Cleanup autom√°tico de procesos

    Args:
        max_pings: N√∫mero de mensajes ping a intercambiar
        ping_interval: Segundos entre cada ping (actualmente no usado)
    """
    
    # Ejecutar sistema SPADE embebido
    spade_task = spade_ping_pong_embedded_task(
        max_pings=max_pings,
        ping_interval=ping_interval
    )
    
    # Configuraci√≥n del componente
    spade_task.set_display_name('SPADE Ping-Pong System (Embebido)')
    spade_task.set_cpu_limit('2')
    spade_task.set_memory_limit('1Gi')
    
    # A√±adir descripci√≥n detallada
    spade_task.description = (
        "Ejecuta un sistema multi-agente completo usando SPADE framework con c√≥digo embebido. "
        "Incluye servidor XMPP integrado y dos agentes que intercambian mensajes. "
        "Versi√≥n optimizada para Vertex AI con toda la l√≥gica embebida en el componente."
    )